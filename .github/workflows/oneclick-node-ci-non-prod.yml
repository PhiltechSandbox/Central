name: oneclick-node-ci-nonprod

on:
 workflow_call:
   inputs:
      ACTIONSFILE:    
        required: true
        type: string
      TAG:    
        required: true
        type: string 
      branch_name: 
        required: true
        type: string
      VERACODE_APPNAME:
       required: true  
       type: string 
      npm_command:
       required: false  
       type: string
      node_version:
       required: false 
       type: string
       default: 14


       
   secrets:  
     SONAR_TOKEN:
       required: true
     SONAR_HOST_URL:
       required: true
     TL_USERNAME:
       required: true
     TL_PASSWORD:
       required: true
     REGISTRY_USER:
       required: true
     REGISTRY_PWD:
       required: true 
     VERACODEID:
       required: true  
     VERACODEKEY:
       required: true
     SONAR_CONTINUEONERROR_NONPROD:
       required: false
     VERACODE_CONTINUEONERROR_NONPROD:
       required: false

env: 
  ACTIONSFILE: ${{ inputs.ACTIONSFILE }}
  TAG: ${{ inputs.TAG }}
jobs:
  npm_Build:
    runs-on: [ AKS ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3      
        with:
          node-version: ${{ inputs.node_version }}
      - name: zip the node_modules
        run: |
          npm install
          zip -r nightly-veracode.zip . -x node_modules/\*
      - uses: actions/upload-artifact@v2
        with:
          name: AppArtifacts
          path: |
            **/*.zip   
      - name: Branch_Name
        run: |
          echo "${{ github.ref_name }}"
         
          
  Sonarqube_Analysis:
    runs-on: [ AKS ]
    needs: npm_Build
    steps:  
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          overwrite-settings: false
          distribution: 'adopt'
      - name: Build and Sonar analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        continue-on-error: ${{ secrets.SONAR_CONTINUEONERROR_NONPROD == 'true' }}

        run: |
          export GIT_COMMIT=`git rev-parse --short HEAD`
          echo ${GIT_COMMIT}
          echo "********************************2"
          npm install 
          ${{ inputs.npm_command }}
          npm run sonar -Dsonar.branch.name=${{ inputs.branch_name }} -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  
  Veracode_Analysis:
    runs-on: [ AKS ]
    needs: Sonarqube_Analysis
    steps:  
      - uses: actions/checkout@v2
      - name: Download Artifact.
        uses: actions/download-artifact@v2
        with:
          name: AppArtifacts 
      - name: veracode scan
        continue-on-error: ${{ secrets.VERACODE_CONTINUEONERROR_NONPROD == 'true' }}
        run: |
          date=$(echo ${{ steps.date.outputs.date }} | cut -c 3-)
          echo "${date}"
          ls -la
          wget https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip -o -d /tmp pipeline-scan-LATEST.zip
          java -jar /tmp/pipeline-scan.jar --veracode_api_id "${{ secrets.VERACODEID }}" --veracode_api_key "${{ secrets.VERACODEKEY }}" --request_policy "Current ABS-Non-PCI Standard 3.0"
          find . -name \*.zip -exec java -jar /tmp/pipeline-scan.jar --veracode_api_id "${{ secrets.VERACODEID }}" --veracode_api_key "${{ secrets.VERACODEKEY }}" --fail_on_severity="Very High, High" --file {} \;
                
  Docker_build_Twistlock_And_Docker_Push:
    runs-on: [ AKS ]
    needs: Veracode_Analysis
    steps:   
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3      
        with:
          node-version:  ${{ inputs.node_version }}
      - name: Read application properties file
        id: appcode
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APPCODE           
      - name: Read application properties file
        id: app_name
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APP_NAME
      - name: Read application properties file
        id: registry_url
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.REGISTRY_URL                
      - name: Docker Build     
        uses: albertsons/esgh-docker-login@v1
        with:
          registry: ${{ steps.registry_url.outputs.prop }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }}          
      - run: |
          npm install
          ${{ inputs.npm_command }}
          docker build --tag ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }} .
      - name: Twistlock_scan
        uses: albertsons/esgh-actions-twistlock@v1
        with:
          tl-username: ${{ secrets.TL_USERNAME }}
          tl-password: ${{ secrets.TL_PASSWORD }}
          tl-console-url: https://us-east1.cloud.twistlock.com/us-2-158288594
          docker-image: ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }}          
      - name: Docker login and Push Image to registry     
        uses: albertsons/esgh-docker-login@v1
        with:
          registry: ${{ steps.registry_url.outputs.prop }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }} 
      - run: |
          docker push ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }}		             

  
