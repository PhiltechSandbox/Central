name: oneclick-ci-nonprod

on:
 workflow_call:
   inputs:
      ACTIONSFILE:    
        required: true
        type: string
      TAG:    
        required: true
        type: string 
      build_type:
        required: true
        type: string
      VERACODE_APPNAME:
       required: true  
       type: string
      DOTNET_APPNAME:
       required: true  
       type: string
      
   secrets:  
     SONAR_TOKEN:
       required: true
     SONAR_HOST_URL:
       required: true
     TL_USERNAME:
       required: true
     TL_PASSWORD:
       required: true
     REGISTRY_USER:
       required: true
     REGISTRY_PWD:
       required: true 
     VERACODEID:
       required: true  
     VERACODEKEY:
       required: true
     SONAR_CONTINUEONERROR_NONPROD:
       required: false
     VERACODE_CONTINUEONERROR_NONPROD:
       required: false

env: 
  ACTIONSFILE: ${{ inputs.ACTIONSFILE }}
  TAG: ${{ inputs.TAG }}
  DOTNET_CLI_HOME: /opt/microsoft/dotnet
  DOTNET_ROOT: /opt/microsoft/dotnet
jobs:
  Dotnet_Build:
    runs-on: [ AKS ]
    steps:
      - uses: actions/checkout@v2
      - name: Build with dotnet
        run: |
          echo ${{ inputs.build_type }}
          whoami
          pwd
        

          
  Sonarqube_Analysis:
    runs-on: [ AKS ]
    needs: Dotnet_Build
    steps:
      - uses: actions/checkout@v2  
      - name: Build and Sonar analyze
        continue-on-error: ${{ secrets.SONAR_CONTINUEONERROR_NONPROD == 'true' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
        run: |
          export PATH=$PATH:/opt/microsoft/dotnet:/opt/microsoft/dotnet/.dotnet/tools
          export PATH=$PATH:/opt/microsoft/dotnet
          dotnet restore ${{ github.workspace }}/${{ inputs.DOTNET_APPNAME }}/${{ inputs.DOTNET_APPNAME }}.sln
          dotnet sonarscanner begin /k:"${{ github.event.repository.name }}" /d:sonar.host.url=${{ secrets.SONAR_HOST_URL }} /d:sonar.login=${{ secrets.SONAR_TOKEN }}
          dotnet build "${{ github.workspace }}/${{ inputs.DOTNET_APPNAME }}/${{ inputs.DOTNET_APPNAME }}.sln" -c Release -o ${{ inputs.DOTNET_APPNAME }}/build
          export JAVA_HOME=/usr/lib/jvm/jdk11/jdk-11.0.9.1+1
          dotnet sonarscanner end /d:sonar.login=${{ secrets.SONAR_TOKEN }}
          dotnet publish "${{ github.workspace }}/${{ inputs.DOTNET_APPNAME }}/${{ inputs.DOTNET_APPNAME }}.sln" -c Release -o ${{ inputs.DOTNET_APPNAME }}/publish
          dotnet publish "${{ github.workspace }}/${{ inputs.DOTNET_APPNAME }}/${{ inputs.DOTNET_APPNAME }}.sln" -c Debug -o ${{ inputs.DOTNET_APPNAME }}/publish_new
          tar -czvf ${{ github.event.repository.name }}.tar.gz ${{ github.workspace }}/${{ inputs.DOTNET_APPNAME }}/publish_new
      - uses: actions/upload-artifact@v2
        with:
          name: AppArtifacts
          path: |
            **/*.tar.gz     
  
  Veracode_Analysis:
    runs-on: [ AKS ]
    needs: Sonarqube_Analysis
    steps:  
      - uses: actions/checkout@v2
      - name: Download Artifact.
        uses: actions/download-artifact@v2
        with:
          name: AppArtifacts 
      - name: veracode scan
        continue-on-error: ${{ secrets.VERACODE_CONTINUEONERROR_NONPROD == 'true' }}
        run: |
          date=$(echo ${{ steps.date.outputs.date }} | cut -c 3-)
          echo "${date}"
          ls -la
          wget https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip -o -d /tmp pipeline-scan-LATEST.zip
          java -jar /tmp/pipeline-scan.jar --veracode_api_id "${{ secrets.VERACODEID }}" --veracode_api_key "${{ secrets.VERACODEKEY }}" --request_policy "Current ABS-Non-PCI Standard 3.0"
          find . -name \*.gz -exec java -jar /tmp/pipeline-scan.jar --veracode_api_id "${{ secrets.VERACODEID }}" --veracode_api_key "${{ secrets.VERACODEKEY }}" --fail_on_severity="Very High, High" --file {} \;      
      - name: clean workspace
        uses: albertsons/esgh-workspace-clean@v2-bash
      - name: Printing workspace cleaned message
        run: |
          echo "Workspace cleared for run ID ${{ github.run_number }}"    
  Docker_build:
    runs-on: [ AKS ]
    needs: [Veracode_Analysis]
    steps:
      - uses: actions/checkout@v2
      - name: Read application properties file
        id: appcode
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APPCODE           
      - name: Read application properties file
        id: app_name
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APP_NAME
      - name: Read application properties file
        id: registry_url
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.REGISTRY_URL                
      - name: Docker Build     
        uses: albertsons/esgh-docker-login@v1
        with:
          registry: ${{ steps.registry_url.outputs.prop }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }}          
      - run: |
          docker build --tag ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }} .
      - name: clean workspace
        uses: albertsons/esgh-workspace-clean@v2-bash
      - name: Printing workspace cleaned message
        run: |
          echo "Workspace cleared for run ID ${{ github.run_number }}"    
  Twistlock_And_Docker_Push:
    runs-on: [ AKS ]
    needs: Docker_build
    steps: 
      - uses: actions/checkout@v2
      - name: Read application properties file
        id: appcode
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APPCODE
      - name: Read application properties file
        id: app_name
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APP_NAME
      - name: Read application properties file
        id: registry_url
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.REGISTRY_URL           
      - uses: albertsons/esgh-actions-twistlock@v1
        with:
          tl-username: ${{ secrets.TL_USERNAME }}
          tl-password: ${{ secrets.TL_PASSWORD }}
          tl-console-url: https://us-east1.cloud.twistlock.com/us-2-158288594
          docker-image: ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }}          
      - name: Docker login and Push Image to registry     
        uses: albertsons/esgh-docker-login@v1
        with:
          registry: ${{ steps.registry_url.outputs.prop }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }} 
      - run: |
          docker push ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }}
      - name: clean workspace
        uses: albertsons/esgh-workspace-clean@v2-bash
      - name: Printing workspace cleaned message
        run: |
          echo "Workspace cleared for run ID ${{ github.run_number }}"    
  
